{"version":3,"sources":["components/Control/index.jsx","components/Card/index.jsx","components/Player/index.jsx","components/Main/index.jsx","pages/Game/index.jsx","pages/Home/index.jsx","App.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/card.js","redux/reducers/status.js","redux/storeConfig.js","index.js"],"names":["Control","playerList","useSelector","state","player","deckCard","card","dispatch","useDispatch","disabled","drawCards","a","cards","length","axios","url","deck_id","method","res","type","payload","data","console","log","totalPoint","className","onClick","then","catch","err","map","key","email","username","Card","isReveal","status","alt","src","image","Player","props","index","code","MainComponent","style","position","height","width","top","left","transform","Game","useEffect","Main","userSchema","yup","shape","required","phone","matches","Home","useState","isStarted","setIsStarted","useFormik","initialValues","validationSchema","validateOnMount","handleChange","values","errors","isValid","handleBlur","touched","setValues","handleSubmit","useCallback","event","preventDefault","handleSetDefaultPlayer","display","flexDirection","alignItems","justifyContent","onSubmit","name","onChange","onBlur","value","placeholder","App","path","component","Component","Boolean","window","location","hostname","match","initialState","checkSpecialCase","specialCards","includes","mapCardToPoint","reducer","clonePlayerList","totalPlayer","i","playerIndex","push","specialCase","max","maxPlayer","point","reduce","total","winners","findIndex","winner","toFixed","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oYAqFeA,EAjFC,WACd,IADoB,EACdC,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOH,cACjDI,EAAWH,aAAY,SAACC,GAAD,OAAWA,EAAMG,KAAKD,YAC7CE,EAAWC,cACbC,GAAW,EACTC,EAAS,uCAAG,4BAAAC,EAAA,yDACmB,IAA/BV,EAAW,GAAGW,MAAMC,OADR,0EAGIC,IAAM,CACtBC,IAAI,uCAAD,OAAyCV,EAASW,QAAlD,mBACHC,OAAQ,QALI,OAGRC,EAHQ,OAOdX,EAAS,CAAEY,KAAM,YAAaC,QAASF,EAAIG,KAAKT,QAPlC,gDASdU,QAAQC,IAAR,MATc,yDAAH,qDALK,cAwBCtB,GAxBD,IAwBpB,2BAAiC,CAC/B,GAA0B,IADK,QACpBuB,WAAkB,CAC3Bf,GAAW,EACX,QA3BgB,8BA4CpB,OACE,yBAAKgB,UAAU,yCACb,yBAAKA,UAAU,gEACb,4BACEhB,SAAUA,EACVgB,UAAU,uBACVC,QAnBa,WACnBZ,IAAM,CACJC,IAAK,gEACLE,OAAQ,QAEPU,MAAK,SAACT,GACLX,EAAS,CAAEY,KAAM,gBAAiBC,QAASF,EAAIG,UAEhDO,OAAM,SAACC,GACNP,QAAQC,IAAIM,QAOZ,WAOA,4BACEpB,SAAUA,EACVgB,UAAU,oBACVC,QAAShB,GAHX,QAOA,4BACED,SAAUA,EACVgB,UAAU,uBACVC,QA9CY,WAClBnB,EAAS,CACPY,KAAM,mBAyCJ,WAQF,yBAAKM,UAAU,UACZxB,EAAW6B,KAAI,SAAC1B,GAAD,OACd,yBAAKqB,UAAU,0BAA0BM,IAAK3B,EAAO4B,OACnD,+BAAK5B,EAAO6B,SAAZ,KACA,+BAAK7B,EAAOoB,WAAZ,YCvDGU,G,OAlBF,SAAC,GAAc,IAAZ5B,EAAW,EAAXA,KACR6B,EAAWjC,aAAY,SAACC,GAAD,OAAWA,EAAMiC,OAAOD,YAErD,OACE,oCACE,yBACEE,IAAI,OACJZ,UAAU,OACVa,IACEH,EACE7B,EAAKiC,MACL,oFCCGC,EAbA,SAACC,GACd,OACE,yBAAKhB,UAAS,wBAAYgB,QAAZ,IAAYA,OAAZ,EAAYA,EAAOC,QAC/B,uBAAGjB,UAAU,QAAb,OAAqBgB,QAArB,IAAqBA,OAArB,EAAqBA,EAAOrC,OAAO6B,UACnC,0BAAMR,UAAU,UACbgB,EAAMrC,OAAOQ,MAAMkB,KAAI,SAACxB,GAAD,OACtB,kBAAC,EAAD,CAAMyB,IAAKzB,EAAKqC,KAAMrC,KAAMA,UCwBvBsC,EA7BO,WACpB,IAAM3C,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOH,cAEvD,OACE,yBACE4C,MAAO,CAAEC,SAAU,WAAYC,OAAQ,SACvCtB,UAAU,aAITxB,EAAW6B,KAAI,SAAC1B,EAAQsC,GAAT,OACd,kBAAC,EAAD,CAAQA,MAAOA,EAAM,EAAGtC,OAAQA,EAAQ2B,IAAK3B,EAAO6B,cAGtD,yBACEI,IAAI,OACJQ,MAAO,CACLC,SAAU,WACVE,MAAO,QACPC,IAAK,MACLC,KAAM,MACNC,UAAW,wBAEbb,IAAI,mFCAGc,EArBF,WACX,IAAM7C,EAAWC,cAYjB,OAXA6C,qBAAU,WACRvC,IAAM,CACJC,IAAI,gEACJE,OAAO,QACNU,MAAK,SAACT,GACPX,EAAS,CAACY,KAAM,aAAcC,QAASF,EAAIG,UAC1CO,OAAM,SAACC,GACRP,QAAQC,IAAIM,QAEb,CAACtB,IAGF,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC+C,EAAD,Q,iBChBAC,EAAaC,MAAaC,MAAM,CACpCxB,SAAUuB,MAAaE,WACvB1B,MAAOwB,MAAaE,WAAW1B,QAC/B2B,MAAOH,MAAaE,WAAWE,QAAQ,cAuG1BC,EApGF,WAAO,IAAD,EACiBC,oBAAS,GAD1B,mBACVC,EADU,KACCC,EADD,KAEXzD,EAAWC,cAFA,EAIiEyD,YAAU,CAC1FC,cAAe,CACbjC,SAAU,GACVD,MAAO,GACP2B,MAAO,GACPnC,WAAY,KACZZ,MAAO,IAETuD,iBAAkBZ,EAClBa,iBAAiB,IATXC,EAJS,EAITA,aAAcC,EAJL,EAIKA,OAAQC,EAJb,EAIaA,OAAQC,EAJrB,EAIqBA,QAASC,EAJ9B,EAI8BA,WAAYC,EAJ1C,EAI0CA,QAASC,EAJnD,EAImDA,UAY9DC,EAAeC,uBAAY,SAACC,GAChCA,EAAMC,iBAEDP,IAELjE,EAAS,CAAEY,KAAM,aAAcC,QAASkD,IAExCN,GAAa,MACZ,CAACU,EAASH,EAAQC,EAASjE,EAAU+D,EAAQN,IAM1CgB,EAAyBH,uBAAY,WASzCF,EARsB,CACpB1C,SAAU,QACVD,MAAO,kBACP2B,MAAO,YACPnC,WAAY,KACZZ,MAAO,OAIR,CAAC+D,IAEJ,OACE,oCAEIZ,EACE,kBAAC,EAAD,MACA,yBACEtC,UAAU,GACVoB,MAAO,CACLG,MAAO,QACPD,OAAQ,QACRkC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,WAGlB,wBAAI3D,UAAU,iBAAd,6BACA,wDACA,0BAAM4D,SAAUT,EAAcnD,UAAU,gBACtC,2BACEN,KAAK,QACLmE,KAAK,WACLC,SAAUlB,EACVmB,OAAQf,EACRgB,MAAOnB,EAAOrC,SACdyD,YAAY,WACZjE,UAAU,4BAEXiD,EAAQzC,UAAYsC,EAAOtC,UAAY,uBAAGR,UAAU,eAAe8C,EAAOtC,UAC3E,2BACEd,KAAK,QACLmE,KAAK,QACLC,SAAUlB,EACVmB,OAAQf,EACRgB,MAAOnB,EAAOtC,MACd0D,YAAY,QACZjE,UAAU,4BAEXiD,EAAQ1C,OAASuC,EAAOvC,OAAS,uBAAGP,UAAU,eAAe8C,EAAOvC,OACrE,2BACEb,KAAK,QACLmE,KAAK,QACLC,SAAUlB,EACVmB,OAAQf,EACRgB,MAAOnB,EAAOX,MACd+B,YAAY,QACZjE,UAAU,4BAEXiD,EAAQf,OAASY,EAAOZ,OAAS,uBAAGlC,UAAU,eAAe8C,EAAOZ,OACrE,4BAAQlC,UAAU,kBAAkBhB,UAAW+D,GAA/C,mBAEF,4BAAQ9C,QAASsD,EAAwBvD,UAAU,mBAAnD,yBC1FGkE,E,uKATX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWhC,U,GALnBiC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBFC,EAAe,CACjBnG,WAAY,CACV,CACEgC,SAAU,WACVD,MAAO,oBACP2B,MAAO,aACPnC,WAAY,KACZZ,MAAO,IAET,CACEqB,SAAU,WACVD,MAAO,oBACP2B,MAAO,aACPnC,WAAY,KACZZ,MAAO,IAET,CACEqB,SAAU,WACVD,MAAO,oBACP2B,MAAO,YACPnC,WAAY,KACZZ,MAAO,MAKPyF,EAAmB,SAACzF,GACxB,IADkC,EAC5B0F,EAAe,CAAC,OAAQ,OAAQ,SADJ,cAEf1F,GAFe,IAElC,2BAA0B,CAAC,IAAhBN,EAAe,QACxB,IAAKgG,EAAaC,SAASjG,EAAKmF,OAAQ,OAAO,GAHf,8BAKlC,OAAO,GAGHe,EAAiB,SAACf,GAEtB,MAAc,QAAVA,EAAwB,EADP,CAAC,OAAQ,OAAQ,SAErBc,SAASd,GAAe,IACjCA,GA+DKgB,EA5DC,WAA8C,IAA7CtG,EAA4C,uDAApCiG,EAAoC,yCAApBjF,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC7C,OAAQD,GACN,IAAK,aAEH,OADAhB,EAAMF,WAAN,CAAoBmB,GAApB,mBAAgCjB,EAAMF,aAC/B,eAAKE,GACd,IAAK,YACH,IAAMuG,EAAe,YAAOvG,EAAMF,YAC5B0G,EAAcD,EAAgB7F,OAEpC,IAAK,IAAI+F,KAAKxF,EAAS,CACrB,IAAMyF,EAAcD,EAAID,EACxBD,EAAgBG,GAAajG,MAAMkG,KAAK1F,EAAQwF,IAGlD,OAAO,2BAAKzG,GAAZ,IAAmBF,WAAYyG,IAEjC,IAAK,eACH,IADmB,EACfK,EAAc,GACdC,EAAM,EACNC,EAAY,GACVP,EAAe,YAAOvG,EAAMF,YAJf,cAKEyG,GALF,IAKnB,2BAAsC,CAAC,IAA5BtG,EAA2B,QACpC,GAAIiG,EAAiBjG,EAAOQ,OAC1BmG,EAAYD,KAAK1G,OACZ,CACL,IAAM8G,EAAQ9G,EAAOQ,MAAMuG,QAAO,SAACC,EAAO9G,GAAR,OAAiB8G,EAAQZ,EAAelG,EAAKmF,SAAQ,GAAK,GACxFyB,EAAQF,GACVA,EAAME,EACND,EAAY,CAAC7G,IACJ8G,IAAUF,GACnBC,EAAUH,KAAK1G,KAdF,8BAmBnB,IAnBmB,EAmBbiH,EAAUN,EAAYlG,OAASkG,EAAcE,EAnBhC,cAqBEP,GArBF,yBAqBRtG,EArBQ,SAuBF,IADDiH,EAAQC,WAAU,SAAAC,GAAM,OAAIA,EAAOtF,WAAa7B,EAAO6B,YAEnE7B,EAAOoB,aAAe,IAAQ6F,EAAQxG,QAAQ2G,QAAQ,GAAK,IAE3DpH,EAAOoB,YAAc,KALzB,2BAAuC,IArBpB,8BA8BnB,OAAO,2BAAKrB,GAAZ,IAAmBF,WAAYyG,IAEjC,IAAK,gBACH,IADoB,EACdA,EAAe,YAAOvG,EAAMF,YADd,cAECyG,GAFD,IAEpB,2BAAsC,CAAC,IAA5BtG,EAA2B,QACpCA,EAAOQ,MAAQ,IAHG,8BAKpB,OAAO,2BAAKT,GAAZ,IAAmBF,WAAYyG,IAEjC,QACE,OAAOvG,ICjGTiG,EAAe,CACjB/F,SAAU,IAcGoG,EAXC,WAA8C,IAA7CtG,EAA4C,uDAApCiG,EAAoC,yCAApBjF,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC7C,OAAQD,GACN,IAAK,aAEL,IAAK,gBACH,OAAO,2BAAKhB,GAAZ,IAAmBE,SAAUe,IAC/B,QACE,OAAOjB,ICXPiG,EAAe,CACjBjE,UAAU,GAgBCsE,EAbC,WAA8C,IAA7CtG,EAA4C,uDAApCiG,EAAoC,yCAApBjF,EAAoB,EAApBA,KAAoB,EAAdC,QAC3C,OAAQD,GACJ,IAAK,eAED,OADAhB,EAAMgC,UAAW,EACV,eAAKhC,GAChB,IAAK,gBAED,OADAA,EAAMgC,UAAW,EACV,eAAKhC,GAChB,QACI,OAAOA,ICRbsG,EAAUgB,YAAgB,CAC9BrH,SACAE,OACA8B,WAGWsF,EAAQC,YACnBlB,EACAT,OAAO4B,8BAAgC5B,OAAO4B,gCCLhDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzG,MAAK,SAAA0G,GACJA,EAAaC,gBAEd1G,OAAM,SAAA2G,GACLjH,QAAQiH,MAAMA,EAAMC,c","file":"static/js/main.f17277e4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nconst Control = () => {\r\n  const playerList = useSelector((state) => state.player.playerList);\r\n  const deckCard = useSelector((state) => state.card.deckCard);\r\n  const dispatch = useDispatch();\r\n  let disabled = false;\r\n  const drawCards = async () => {\r\n    if (playerList[0].cards.length === 3) return;\r\n    try {\r\n      const res = await axios({\r\n        url: `https://deckofcardsapi.com/api/deck/${deckCard.deck_id}/draw/?count=12`,\r\n        method: \"GET\",\r\n      });\r\n      dispatch({ type: \"ADD_CARDS\", payload: res.data.cards });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const revealCards = () => {\r\n    dispatch({\r\n      type: \"REVEAL_CARDS\",\r\n    });\r\n  };\r\n\r\n  for (const player of playerList) {\r\n    if (player.totalPoint === 0) {\r\n      disabled = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  const shuffleCards = () => {\r\n    axios({\r\n      url: \"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\",\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => {\r\n        dispatch({ type: \"SHUFFLE_CARDS\", payload: res.data });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex  justify-content-end container\">\r\n      <div className=\"border d-flex justify-content-center align-items-center px-2\">\r\n        <button\r\n          disabled={disabled}\r\n          className=\"btn btn-success mr-2\"\r\n          onClick={shuffleCards}\r\n        >\r\n          Shuffle\r\n        </button>\r\n        <button\r\n          disabled={disabled}\r\n          className=\"btn btn-info mr-2\"\r\n          onClick={drawCards}\r\n        >\r\n          Draw\r\n        </button>\r\n        <button\r\n          disabled={disabled}\r\n          className=\"btn btn-primary mr-2\"\r\n          onClick={revealCards}\r\n        >\r\n          Reveal\r\n        </button>\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {playerList.map((player) => (\r\n          <div className=\"border px-3 text-center\" key={player.email}>\r\n            <p> {player.username} </p>\r\n            <p> {player.totalPoint} </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Control;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./card.css\";\r\n\r\nconst Card = ({ card }) => {\r\n  const isReveal = useSelector((state) => state.status.isReveal);\r\n\r\n  return (\r\n    <>\r\n      <img\r\n        alt=\"card\"\r\n        className=\"card\"\r\n        src={\r\n          isReveal ?\r\n            card.image :\r\n            \"https://i.pinimg.com/originals/10/80/a4/1080a4bd1a33cec92019fab5efb3995d.png\"\r\n        }\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../Card\";\r\n\r\nconst Player = (props) => {\r\n  return (\r\n    <div className={`player-${props?.index}`}>\r\n      <p className=\"lead\">{props?.player.username}</p>\r\n      <main className=\"d-flex\">\r\n        {props.player.cards.map((card) => (\r\n          <Card key={card.code} card={card} />\r\n        ))}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\nimport Player from \"../Player\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst MainComponent = () => {\r\n  const playerList = useSelector((state) => state.player.playerList);\r\n\r\n  return (\r\n    <div\r\n      style={{ position: \"relative\", height: \"600px\" }}\r\n      className=\"container\"\r\n    >\r\n      {/* <button onClick={handleChangeState}>Change State</button> */}\r\n\r\n      {playerList.map((player, index) => (\r\n        <Player index={index+1} player={player} key={player.username}/>\r\n      ))}\r\n\r\n      <img\r\n        alt=\"main\"\r\n        style={{\r\n          position: \"absolute\",\r\n          width: \"100px\",\r\n          top: \"50%\",\r\n          left: \"50%\",\r\n          transform: \"translate(-50%,-50%)\",\r\n        }}\r\n        src=\"https://i.pinimg.com/originals/10/80/a4/1080a4bd1a33cec92019fab5efb3995d.png\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainComponent;\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport \"./index.css\";\r\nimport Controls from \"../../components/Control\";\r\nimport Main from \"../../components/Main\";\r\nimport axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\nconst Game = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    axios({\r\n      url:'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1',\r\n      method:'GET'\r\n    }).then((res) => {\r\n      dispatch({type: 'FETCH_CARD', payload: res.data});\r\n    }).catch((err) => {\r\n      console.log(err);\r\n    })\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Controls />\r\n      <Main />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport Game from \"../Game\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst userSchema = yup.object().shape({\r\n  username: yup.string().required(),\r\n  email: yup.string().required().email(),\r\n  phone: yup.string().required().matches(/^[0-9]+$/),\r\n});\r\n\r\nconst Home = () => {\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const { handleChange, values, errors, isValid, handleBlur, touched, setValues } = useFormik({\r\n    initialValues: {\r\n      username: '',\r\n      email: '',\r\n      phone: '',\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n    validationSchema: userSchema,\r\n    validateOnMount: true,\r\n  });\r\n\r\n  const handleSubmit = useCallback((event) => {\r\n    event.preventDefault();\r\n\r\n    if (!isValid) return;\r\n\r\n    dispatch({ type: \"ADD_PLAYER\", payload: values });\r\n\r\n    setIsStarted(true);\r\n  }, [touched, errors, isValid, dispatch, values, setIsStarted]);\r\n\r\n  // const setAllTouched = () => {\r\n  //   const fields = ['username', 'email', 'phone']\r\n  // };\r\n\r\n  const handleSetDefaultPlayer = useCallback(() => {\r\n    const defaultPlayer = {\r\n      username: 'hoang',\r\n      email: 'hoang@gmail.com',\r\n      phone: '123123123',\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    }\r\n\r\n    setValues(defaultPlayer);\r\n  }, [setValues]);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        isStarted ?\r\n          <Game /> :\r\n          <div\r\n            className=\"\"\r\n            style={{\r\n              width: \"100vw\",\r\n              height: \"100vh\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <h1 className=\"diplay-4 mb-5\"> Welcome to Pocker Center</h1>\r\n            <h3>Fill your info and start</h3>\r\n            <form onSubmit={handleSubmit} className=\"w-25 mx-auto\">\r\n              <input\r\n                type=\"input\"\r\n                name=\"username\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.username}\r\n                placeholder=\"username\"\r\n                className=\"w-100 form-control mb-3\"\r\n              />\r\n              {touched.username && errors.username && <p className=\"text-danger\">{errors.username}</p>}\r\n              <input\r\n                type=\"input\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.email}\r\n                placeholder=\"email\"\r\n                className=\"w-100 form-control mb-3\"\r\n              />\r\n              {touched.email && errors.email && <p className=\"text-danger\">{errors.email}</p>}\r\n              <input\r\n                type=\"input\"\r\n                name=\"phone\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.phone}\r\n                placeholder=\"phone\"\r\n                className=\"w-100 form-control mb-3\"\r\n              />\r\n              {touched.phone && errors.phone && <p className=\"text-danger\">{errors.phone}</p>}\r\n              <button className=\"btn btn-success\" disabled={!isValid} >Start new Game</button>\r\n            </form>\r\n            <button onClick={handleSetDefaultPlayer} className=\"btn btn-primary\">Set default player</button>\r\n          </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let initialState = {\r\n  playerList: [\r\n    {\r\n      username: \"Player 1\",\r\n      email: \"player1@gmail.com\",\r\n      phone: \"1829839030\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n    {\r\n      username: \"Player 2\",\r\n      email: \"player2@gmail.com\",\r\n      phone: \"8849839939\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n    {\r\n      username: \"Player 3\",\r\n      email: \"player3@gmail.com\",\r\n      phone: \"894589485\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n  ],\r\n};\r\n\r\nconst checkSpecialCase = (cards) => {\r\n  const specialCards = ['KING', 'JACK', 'QUEEN'];\r\n  for (const card of cards) {\r\n    if (!specialCards.includes(card.value)) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nconst mapCardToPoint = (value) => {\r\n  const specialCards = ['KING', 'JACK', 'QUEEN'];\r\n  if (value === 'ACE') return 1;\r\n  if (specialCards.includes(value)) return 10;\r\n  return +value;\r\n}\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"ADD_PLAYER\":\r\n      state.playerList = [payload, ...state.playerList];\r\n      return { ...state };\r\n    case 'ADD_CARDS': {\r\n      const clonePlayerList = [...state.playerList];\r\n      const totalPlayer = clonePlayerList.length;\r\n\r\n      for (let i in payload) {\r\n        const playerIndex = i % totalPlayer;\r\n        clonePlayerList[playerIndex].cards.push(payload[i]);\r\n      }\r\n\r\n      return { ...state, playerList: clonePlayerList };\r\n    }\r\n    case 'REVEAL_CARDS': {\r\n      let specialCase = [];\r\n      let max = 0;\r\n      let maxPlayer = [];\r\n      const clonePlayerList = [...state.playerList];\r\n      for (const player of clonePlayerList) {\r\n        if (checkSpecialCase(player.cards)) {\r\n          specialCase.push(player);\r\n        } else {\r\n          const point = player.cards.reduce((total, card) => total + mapCardToPoint(card.value), 0) % 10;\r\n          if (point > max) {\r\n            max = point;\r\n            maxPlayer = [player];\r\n          } else if (point === max) {\r\n            maxPlayer.push(player);\r\n          }\r\n        }\r\n      };\r\n\r\n      const winners = specialCase.length ? specialCase : maxPlayer;\r\n\r\n      for (const player of clonePlayerList) {\r\n        const index = winners.findIndex(winner => winner.username === player.username)\r\n        if (index !== -1) {\r\n          player.totalPoint += (20000 / winners.length).toFixed(0) - 5000;\r\n        } else {\r\n          player.totalPoint -= 5000;\r\n        }\r\n      }\r\n\r\n      return { ...state, playerList: clonePlayerList };\r\n    }\r\n    case 'SHUFFLE_CARDS': {\r\n      const clonePlayerList = [...state.playerList];\r\n      for (const player of clonePlayerList) {\r\n        player.cards = [];\r\n      }\r\n      return { ...state, playerList: clonePlayerList };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","let initialState = {\r\n  deckCard: {},\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case 'FETCH_CARD':\r\n      return { ...state, deckCard: payload };\r\n    case 'SHUFFLE_CARDS':\r\n      return { ...state, deckCard: payload }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","const initialState = {\r\n    isReveal: false,\r\n}\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case 'REVEAL_CARDS':\r\n            state.isReveal = true;\r\n            return { ...state };\r\n        case 'SHUFFLE_CARDS':\r\n            state.isReveal = false;\r\n            return { ...state }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { createStore, combineReducers } from \"redux\";\r\nimport player from \"./reducers/player\";\r\nimport card from \"./reducers/card\";\r\nimport status from './reducers/status'\r\n//create root reducer\r\nconst reducer = combineReducers({\r\n  player,\r\n  card,\r\n  status,\r\n});\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/storeConfig\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}